package com.graphle.graphlemanager

import com.graphle.graphlemanager.file.File
import org.springframework.data.domain.Example
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.data.domain.Sort
import org.springframework.data.neo4j.repository.Neo4jRepository
import org.springframework.data.repository.query.FluentQuery
import java.util.Optional
import java.util.function.Function

class Neo4JRepoAutoGenerated<T, ID> : Neo4jRepository<T, ID> {
    override fun <S : T?> save(entity: S): S & Any {
        TODO("Not yet implemented")
    }

    override fun <S : T?> saveAll(entities: Iterable<S?>): List<S?> {
        TODO("Not yet implemented")
    }


    override fun findById(id: ID): Optional<T?> {
        TODO("Not yet implemented")
    }

    override fun existsById(id: ID): Boolean {
        TODO("Not yet implemented")
    }

    override fun findAll(): List<T?> {
        TODO("Not yet implemented")
    }

    override fun findAllById(iterable: Iterable<ID?>): List<T?> {
        TODO("Not yet implemented")
    }

    override fun count(): Long {
        TODO("Not yet implemented")
    }

    override fun delete(entity: T) {
        TODO("Not yet implemented")
    }

    override fun deleteById(id: ID) {
        TODO("Not yet implemented")
    }

    override fun findAll(sort: Sort): List<T?> {
        TODO("Not yet implemented")
    }

    override fun <S : T?> findAll(example: Example<S?>): List<S?> {
        TODO("Not yet implemented")
    }

    override fun <S : T?> findAll(
        example: Example<S?>,
        sort: Sort
    ): List<S?> {
        TODO("Not yet implemented")
    }

    override fun findAll(pageable: Pageable): Page<T?> {
        TODO("Not yet implemented")
    }

    override fun <S : T?> findOne(example: Example<S?>): Optional<S?> {
        TODO("Not yet implemented")
    }

    override fun <S : T?> findAll(
        example: Example<S?>,
        pageable: Pageable
    ): Page<S?> {
        TODO("Not yet implemented")
    }

    override fun <S : T?> count(example: Example<S?>): Long {
        TODO("Not yet implemented")
    }

    override fun <S : T?> exists(example: Example<S?>): Boolean {
        TODO("Not yet implemented")
    }

    override fun <S : T?, R : Any?> findBy(
        example: Example<S?>,
        queryFunction: Function<FluentQuery.FetchableFluentQuery<S?>?, R?>
    ): R & Any {
        TODO("Not yet implemented")
    }

    override fun deleteAllById(ids: Iterable<ID?>) {
        TODO("Not yet implemented")
    }

    override fun deleteAll(entities: Iterable<T?>) {
        TODO("Not yet implemented")
    }

    override fun deleteAll() {
        TODO("Not yet implemented")
    }
}